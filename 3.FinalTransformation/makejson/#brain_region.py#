# -*- coding: utf-8 -*-
"""
Created on Thu Aug  4 17:27:48 2016

@author: balamurali
"""
import jsonontology_parse as jp
import SimpleITK as sitk
from skimage import measure
import numpy as np
import json
import os,sys

#workingdir='/sonas-hs/mitra/hpc/home/hliu/public/mice_registration_pipeline/'

imgloc='/sonas-hs/mitra/hpc/home/hliu/public/mice_registration_pipeline/data/registration/%s/%s_STSpipeline_output/'

namepattern = '%s_annotation_rot.img'  #'_annotation_raw.img'


def slice_image(pmdno, sliceno):
    img = load_image(imgloc +'/'+pmdno+ namepattern)
    imgslice = np.array(img[:,int(sliceno-1),:])
    return imgslice


def coordinate_change(pt,siz):
    height, width = siz
    #pt_x = pt[0]/width * 24000
    #pt_y = -pt[1]/height * 18000
    pt_x = pt[0]
    pt_y = -pt[1]
    return [pt_x, pt_y]

def getcomponents(imgslice):
    siz = imgslice.shape

    colors = np.union1d(np.array(imgslice).ravel(),np.array([]))
  
    json_data = """{"type":"FeatureCollection","features":["""
    unknown_colors = []
    
    for ci in colors[1:]: 
        count = True
        bwarr = imgslice==ci;
        con = measure.find_contours(bwarr,0.5)
        #con = measure.subdivide_polygon(con, degree=2)
        sum_1 = 0
        (br_reg_name,depth) = jp.ontology_find(ci)

	if br_reg_name is None:
	    #continue
	    br_reg_name = {'name': '##', 'acronym': '00'}
	    unknown_colors.append(ci)

        #print br_reg_name
        mul_pol = []
        for coni in con:
            #print coni
            conxy = np.array(coni)
            index_x = np.argmin((conxy[:,1]))
            slope = (conxy[:,0][index_x+1]-conxy[:,0][index_x])/(conxy[:,1][index_x+1]-conxy[:,1][index_x]+0.00001)
            if slope < 0:
                x_coord = list(conxy[:,1])
                y_coord = list(conxy[:,0])
                temp_arr = []
                for j in range(len(x_coord)):
                    temp_arr.append(coordinate_change([x_coord[j],y_coord[j]], siz))

                if len(con)==1:
                    coord = """\n{"type":"Feature","id":"%d","properties":{"name":"%s","acronym": "%s" },"geometry":{"type":"Polygon","coordinates":["""%(ci,br_reg_name["name"], br_reg_name["acronym"])+str(temp_arr)+"""]}},"""
                    count = False

                else:
                    mul_pol.append(temp_arr)

        if count is True:
            coord = """\n{"type":"Feature","id":"%d","properties":{"name":"%s","acronym":"%s"},"geometry":{"type":"MultiPolygon","coordinates":["""%(ci,br_reg_name["name"], br_reg_name["acronym"])+str(mul_pol)+"""]}},"""


        #file_json.write(coord)
	json_data = json_data + coord

    return json_data[:-1] + "]}", set(unknown_colors)


outdir = 'jsondata'

if __name__ =="__main__":
    pmdno = sys.argv[1]
    sliceno = None
    if len(sys.argv)>2:
        sliceno = int(sys.argv[2])
    #imgname = imgloc +'/PMD'+pmdno+ namepattern
    #print imgname
    #img = load_image(imgname)
    imgpath = imgloc+'/'+namepattern

    #img = sitk.ReadImage(imgpath %(pmdno,pmdno,pmdno))
    img  = sitk.ReadImage('/sonas-hs/mitra/hpc/home/hliu/public/mice_registration_pipeline/template/annotation_10.nrrd')
    #img  = sitk.ReadImage('/sonas-hs/mitra/hpc/home/xli/makejson/PMD2446_annotation_10.img')

    imgA = sitk.GetArrayFromImage(img)
    shape = img.GetSize()
    ns = shape[1]-60 # XXX
    unknown_cols = []

    if not os.path.exists(outdir+'/'+pmdno):
        os.mkdir(outdir+'/'+pmdno)

    for si in range(ns):
        if sliceno is not None and si!=sliceno-1:
	        continue
        if len(shape)==3:
            imgslice = imgA[:,si+60,:]  #XXX adding front pad
        else:
            imgslice = imgA[:,si+60,:,0] #XXX
        json_data, ukc = getcomponents(imgslice.T)
        if len(ukc)>0:
            print si, ukc
        unknown_cols = np.union1d(unknown_cols,list(ukc))
        file_json = open('%s/%s/atlas_%s_%d.json' % (outdir,pmdno,pmdno, si+1),'w')
        file_json.write(json_data)
        file_json.close()
        print unknown_cols

